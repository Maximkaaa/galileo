[package]
name = "galileo"
version.workspace = true
edition.workspace = true
authors.workspace = true
repository.workspace = true
license.workspace = true
keywords.workspace = true
documentation = "https://docs.rs/galileo"
description = "Cross-platform general purpose map rendering engine"
readme = "../README.md"
exclude = ["examples/data"]

[features]
default = ["wgpu", "serde", "winit", "_tests", "rustybuzz", "image"]
wgpu = ["dep:wgpu", "raw-window-handle"]
geojson = ["dep:geojson", "galileo-types/geojson"]
rustybuzz = ["dep:rustybuzz"]
image = ["dep:image"]

# Used to provide some fixtures for doctests
_tests = []

[dependencies]
ahash = { workspace = true }
async-trait = { workspace = true }
base64 = { workspace = true }
bytemuck = { workspace = true, features = ["derive"] }
bytes = { workspace = true }
cfg-if = { workspace = true }
futures-intrusive = { workspace = true }
galileo-mvt = { workspace = true }
galileo-types = { workspace = true }
geojson = { workspace = true, optional = true }
geozero = { workspace = true }
image = { workspace = true, default-features = false, features = ["png", "jpeg"], optional = true }
lazy_static = { workspace = true }
log = { workspace = true }
lyon = { workspace = true }
nalgebra = { workspace = true }
num-traits = { workspace = true }
quick_cache = { workspace = true }
parking_lot = { workspace = true }
raw-window-handle = { workspace = true, optional = true }
rustybuzz = { workspace = true, optional = true }
serde = { workspace = true, optional = true, features = ["std", "derive", "rc"] }
strfmt = { workspace = true }
thiserror = { workspace = true }
web-time = { workspace = true }
winit = { workspace = true, default-features = true, features = ["rwh_06"], optional = true }

[dev-dependencies]
anyhow = { workspace = true }
approx = { workspace = true }
assert_matches = { workspace = true }
bincode = { workspace = true, features = ["serde"] }
csv = { workspace = true }
eframe = { workspace = true }
egui = { workspace = true }
env_logger = { workspace = true }
galileo-egui = { workspace = true, features = ["init"] }
geo = { workspace = true }
geo-types = { workspace = true }
geojson = { workspace = true }
las = { workspace = true, features = ["laz"] }
serde_json = { workspace = true }
tokio-test = { workspace = true }

[lib]
crate-type = ["cdylib", "rlib"]
doctest = false

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
wgpu = { workspace = true, default-features = true, optional = true }
tokio = { workspace = true, default-features = true, features = ["macros", "rt", "rt-multi-thread"] }
maybe-sync = { workspace = true, features = ["sync"] }
reqwest = { workspace = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
bytemuck = { workspace = true, features = ["derive", "extern_crate_alloc"] }
console_error_panic_hook = { workspace = true }
console_log = { workspace = true }
futures = { workspace = true }
wgpu = { workspace = true, default-features = false, features = ["webgl", "wgsl"] }
wasm-bindgen-futures = { workspace = true }
wasm-bindgen = { workspace = true }
wasm-bindgen-derive = { workspace = true }
js-sys = { workspace = true }
serde = { workspace = true, features = ["std", "derive"] }
serde_bytes = { workspace = true }
bincode = { workspace = true, features = ["serde"] }
serde-wasm-bindgen = { workspace = true }
maybe-sync = { workspace = true, features = [] }
getrandom = { workspace = true, features = ["js"] }
tokio = { workspace = true, default-features = false, features = ["sync"] }
web-sys = { workspace = true, features = [
    "Document",
    "Window",
    "Element",
    "HtmlImageElement",
    "HtmlCanvasElement",
    "CanvasRenderingContext2d",
    "ImageBitmap",
    "ImageData",
    "Request",
    "Headers",
    "RequestInit",
    "RequestMode",
    "Response",
    "Worker",
    "DedicatedWorkerGlobalScope",
    "MessageEvent",
] }

[target.'cfg(target_os = "android")'.dependencies]
reqwest = { workspace = true, features = ["native-tls-vendored"] }
winit = { workspace = true, features = ["android-native-activity"] }

[[example]]
name = "render_to_file"
required-features = ["geojson"]

[lints]
workspace = true

